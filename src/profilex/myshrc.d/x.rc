# ~/.profilex/myshrc.d/x.rc
#
# AUTHOR     Snakevil Zen <zsnakevil@gmail.com>
# COPYRIGHT  Â© 2011 Snakevil.in.

which awk cat grep printf wc > /dev/null || return 0

# {{{ __X(): Main function as the entry point.

__X() {
  local E_WRITE_DENIED='The RC file cannot be written!'
  local E_NO_PATH='Oops... No path had been registered!'
  local E_ALIAS_REQUIRED='The alias of some path should be given.'

  local rcfile="${HOME}/.xrc"
  local fldsep='//Snakevil//'

  local list
  if [ -r "${rcfile}" ]
  then
    list=`cat "${rcfile}"`
    [ ! -w "${rcfile}" ] && {
      echo "${E_WRITE_DENIED}" >&2
      return 1
    }
  elif [ ! -w "${HOME}" ]
  then
    echo "${E_WRITE_DENIED}" >&2
    return 1
  fi

  local list_cnt=`echo "${list}" | wc -l`

  local cmd
  local opt
  if [ 0 -lt $# ]
  then
    cmd=$1
    opt=$2
  else
    cmd='help'
  fi
  case "${cmd}" in
    '+'|'a'|'add' )
      cmd='add'
      ;;
    '-'|'d'|'del'|'delete'|'drop'|'r'|'rm'|'remove' )
      cmd='rm'
      ;;
    ':'|'l'|'ls'|'list' )
      cmd='ls'
      ;;
    'c'|'cd' )
      cmd='cd'
      ;;
    '?'|'h'|'help' )
      cmd='help'
      ;;
    * )
      opt="${cmd}"
      cmd='cd'
      ;;
  esac

  [ 0 -eq $list_cnt ] && [ 'cd' = $cmd -o 'rm' = $cmd -o 'ls' = $cmd ] && {
    echo "${E_NO_PATH}" >&2
    return 2
  }

  [ -z "${opt}" ] && [ 'add' = $cmd -o 'rm' = $cmd ] && {
    echo "${E_ALIAS_REQUIRED}" >&2
    return 3
  }

  case $cmd in
    'add' )
      __X_ADD "${opt}" $list_cnt "${fldsep}" "${list}" "${rcfile}"
      ;;
    'rm' )
      __X_RM "${opt}" $list_cnt "${fldsep}" "${list}" "${rcfile}"
      ;;
    'cd' )
      __X_CD "${opt}" $list_cnt "${fldsep}" "${list}"
      ;;
    'ls' )
      __X_LS $list_cnt "${fldsep}" "${list}"
      ;;
    'help' )
      __X_HELP "${opt}"
      ;;
    * )
      return 4
  esac
}

# }}}

# {{{ __X_ADD(): Adds new alias.

__X_ADD() {
  [ 5 -eq $# ] || return 5

  local alias="$1"
  local list_cnt=$2
  local fldsep="$3"
  local list="$4"
  local rcfile="$5"

  local E_PATH_REGISTERED='CurrentWorkingDirectory has already been '
  E_PATH_REGISTERED="${E_PATH_REGISTERED}registered as '%s'."

  local reg_path=`echo -n "${list}" \
    | awk -F"${fldsep}" -v "alias=${alias}" ' \
      alias==$1 { \
        path=$2 \
      } \
      END { \
        print path \
      }'`

  [ -n "${reg_path}" ] && {
    [ "${PWD}" = "${reg_path}" ] && {
      printf "${E_PATH_REGISTERED}" "${alias}" >&2
      echo >&2
      return 6
    }

    echo "Alias '${alias}' has been used for '${reg_path}'."
    __X__confirm_yesno 'Overwrite it'

    [ 0 -eq $? ] && {
      echo -n "${list}" \
        | grep -v "^${alias}${fldsep}" > "${rcfile}"
      echo "${alias}${fldsep}${PWD}" >> "${rcfile}"
      echo "OK! Alias '${alias}' replaced."
      return 0
    }
  }

  echo "${alias}${fldsep}${PWD}" >> "${rcfile}"
  echo "OK! CurrentWorkingDirectory registered as '${alias}'."
  return 0
}

# }}}

# {{{ __X_RM(): Drops some exist alias.

__X_RM() {
  [ 5 -eq $# ] || return 5

  local alias="$1"
  local list_cnt=$2
  local fldsep="$3"
  local list="$4"
  local rcfile="$5"

  local E_ALIAS_NOT_USED='Alias '"'"'%s'"'"' have not been used yet.'

  local newlist=`echo -n "${list}" \
    | awk -F"${fldsep}" -v "alias=${alias}" ' \
      BEGIN { \
        OFS="'"${fldsep}"'" \
      } \
      alias!=$1 { \
        print \
      }'`

  [ "${list}" = "${newlist}" ] && {
    printf "${E_ALIAS_NOT_USED}" "${alias}" >&2
    echo >&2
    return 7
  }

  echo "${newlist}" > "${rcfile}"
  echo "OK! Alias '${alias}' removed."
  return 0
}

# }}}

# {{{ __X_CD(): Changes PWD to the path of some alias.

__X_CD() {
  [ 4 -eq $# ] || return 5

  local alias="$1"
  local list_cnt=$2
  local fldsep="$3"
  local list="$4"

  local E_ALIAS_NOT_USED="Alias '%s' have not been used yet."

  local reg_path=`echo -n "${list}" \
    | awk -F"${fldsep}" -v "alias=${alias}" ' \
      alias==$1 { \
        path=$2 \
      } \
      END { \
        print path \
      }'`

  [ -z "${reg_path}" ] && {
    printf "${E_ALIAS_NOT_USED}" "${alias}" >&2
    echo >&2
    return 8
  }

  [ "${reg_path}" = "${PWD}" ] || cd "${reg_path}"

  return 0
}

# }}}

# {{{ __X_LS(): Lists all registered aliases.

__X_LS() {
  [ 3 -eq $# ] || return 5

  local list_cnt=$1
  local fldsep="$2"
  local list="$3"

  echo "${list_cnt} paths been kept:"
  echo "${list}" \
    | awk -F"${fldsep}" ' \
      BEGIN { \
        OFS="\t" \
      } \
      { \
        if (7 < length($1)) { \
          print $1, $2 \
        } else { \
          print $1, "", $2 \
        }
      }'
}

# }}}

# {{{ __X_HELP(): Show help information.

__X_HELP() {
  [ 2 -gt $# ] || return 5

  local topic="$1"

  local E_UNKNOWN_TOPIC="Unknown help topic '%s'."

  [ -z "${topic}" ] || {
    case "${topic}" in
      'add' )
        cat << HELP_ADD
Registers current working path to X.

Usage:
  xad <ALIAS>
 or
  x add <ALIAS>

Aliases:
  +
  a
HELP_ADD
        ;;
      'rm' )
        cat << HELP_RM
Removes some registered path from X.

Usage:
  xrm <ALIAS>
 or
  x rm <ALIAS>

Aliases:
  -
  d
  del
  delete
  drop
  r
  remove
HELP_RM
        ;;
      'ls' )
        cat << HELP_LS
Lists all registered pathes in X.

Usage:
  xls
 or
  x ls

Aliases:
  :
  l
  list
HELP_LS
        ;;
      'cd' )
        cat << HELP_CD
Changes current working directory to some registered path in X.

Usage:
  xcd <ALIAS>
 or
  x cd <ALIAS>

ALiases:
  (BLANK)
  c
HELP_CD
        ;;
      * )
        printf "${E_UNKNOWN_TOPIC}" "${topic}" >&2
        echo >&2
        echo >&2
        topic=
        ;;
    esac
  }

  [ -z "${topic}" ] && {
    cat << HELP_MAIN
Enhances the directories changing behavior for Bourne-compatiable shells.

Following sub-commands are supported. For more information, try
 'x help <SUB-COMMAND>':

  add       Registeres current PWD. Shorten as 'xad'.
  cd        Changes PWD to some path. Shorten as 'xcd'.
  ls        Lists all paths. Shorten as 'xls'.
  rm        Removes some path. Shorten as 'xrm'.

  help      Shows detail information about some sub-command.
HELP_MAIN
  }

  __X__help_tail

  return 0
}

# }}}

# {{{ Defines other basic function to improve the progress.

__X__confirm_yesno() {
  echo -ne "$1"

  local answer
  while [ 1 ]
  do
    echo -n ' (Yes/No)? '
    read answer

    case "${answer}" in
      'y'|'Y'|'yes'|'Yes'|'YES' )
        return 0
        ;;
      'n'|'N'|'no'|'No'|'NO' )
        return 1
        ;;
    esac
  done
}

__X__help_tail() {
  cat << HELP_TAIL

Written by Snakevil Zen <zsnakevil@gmail.com>.
HELP_TAIL
}

# }}}

alias x='__X'
alias xad='x add'
alias xcd='x cd'
alias xls='x ls'
alias xrm='x rm'

# vim:ft=sh:fenc=utf-8:ff=unix:tw=75:ts=2:sts=2:et:ai:si
# vim:nowrap:sw=2:nu:nuw=4:so=5:fen:fdm=marker
